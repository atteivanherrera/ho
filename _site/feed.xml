<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/ho/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/ho/" rel="alternate" type="text/html" /><updated>2023-02-10T02:39:56-05:00</updated><id>http://localhost:4000/ho/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/ho/jekyll/update/2023/02/09/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-02-09T00:00:50-05:00</published><updated>2023-02-09T00:00:50-05:00</updated><id>http://localhost:4000/ho/jekyll/update/2023/02/09/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/ho/jekyll/update/2023/02/09/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">ETH Analysis of regression</title><link href="http://localhost:4000/ho/python/2023/02/09/eth.html" rel="alternate" type="text/html" title="ETH Analysis of regression" /><published>2023-02-09T00:00:50-05:00</published><updated>2023-02-09T00:00:50-05:00</updated><id>http://localhost:4000/ho/python/2023/02/09/eth</id><content type="html" xml:base="http://localhost:4000/ho/python/2023/02/09/eth.html"><![CDATA[<p>In this post we’re gonna check at the 20 weeks with the best and worst returns in the history of Ethereum, check at their distribution and</p>

<p>These are the libraries we will use:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">datetime</span> 
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">norm</span>
<span class="kn">import</span> <span class="nn">yfinance</span> <span class="k">as</span> <span class="n">yf</span>

<span class="c1">#we will then use the yfinance library to extract the information about the ETH-USD pair
</span>
<span class="c1">#The historic prices are found in the method .history
</span>
<span class="n">ETH</span> <span class="o">=</span> <span class="n">yf</span><span class="p">.</span><span class="n">Ticker</span><span class="p">(</span><span class="s">"ETH-USD"</span><span class="p">)</span>
<span class="n">ETH</span> <span class="o">=</span> <span class="n">ETH</span><span class="p">.</span><span class="n">history</span><span class="p">(</span><span class="n">period</span><span class="o">=</span><span class="s">"max"</span><span class="p">)</span></code></pre></figure>

<p>In this case since we’re intereseted in working with the returns, to remove scale bias from the analysis</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">percentage_change</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">weekly_ETH_returns</span> <span class="o">=</span> <span class="n">ETH</span><span class="p">[</span><span class="s">"Close"</span><span class="p">].</span><span class="n">resample</span><span class="p">(</span><span class="s">"W"</span><span class="p">).</span><span class="nb">apply</span><span class="p">(</span><span class="n">percentage_change</span><span class="p">)</span>

<span class="c1">#our newly created 'weekly_ETH_returns' contains the returns for each week since the ETH has been traded</span></code></pre></figure>

<p>This will return a dataframe called ETH with data for the closing price</p>

<h2 id="summary-statistics">Summary statistics</h2>

<p>We’re now gonna plot the returns histogram, agains the normal distribution with the same mean and standard deviation as our returns</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">mu</span><span class="p">,</span> <span class="n">stdev</span> <span class="o">=</span> <span class="n">norm</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">weekly_ETH_returns</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">weekly_ETH_returns</span><span class="p">,</span> <span class="n">density</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

<span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">xlim</span><span class="p">()</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">norm</span><span class="p">.</span><span class="n">pdf</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">mu</span><span class="p">,</span> <span class="n">stdev</span><span class="p">)</span>
  
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="s">'k'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">title</span> <span class="o">=</span> <span class="s">"Mean: {:.2f} and Standard deviation: {:.2f}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">stdev</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>

<p>weekly_ETH_returns</p>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="Python" /><summary type="html"><![CDATA[In this post we’re gonna check at the 20 weeks with the best and worst returns in the history of Ethereum, check at their distribution and]]></summary></entry><entry><title type="html">Excel to make budgets</title><link href="http://localhost:4000/ho/excel/2023/02/07/budget.html" rel="alternate" type="text/html" title="Excel to make budgets" /><published>2023-02-07T00:00:50-05:00</published><updated>2023-02-07T00:00:50-05:00</updated><id>http://localhost:4000/ho/excel/2023/02/07/budget</id><content type="html" xml:base="http://localhost:4000/ho/excel/2023/02/07/budget.html"><![CDATA[]]></content><author><name></name></author><category term="Excel" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Excel to make descriptive statistics</title><link href="http://localhost:4000/ho/excel/2023/02/07/super-store.html" rel="alternate" type="text/html" title="Excel to make descriptive statistics" /><published>2023-02-07T00:00:50-05:00</published><updated>2023-02-07T00:00:50-05:00</updated><id>http://localhost:4000/ho/excel/2023/02/07/super-store</id><content type="html" xml:base="http://localhost:4000/ho/excel/2023/02/07/super-store.html"><![CDATA[<p>something</p>]]></content><author><name></name></author><category term="Excel" /><summary type="html"><![CDATA[something]]></summary></entry></feed>